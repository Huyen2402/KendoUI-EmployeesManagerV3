
@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}


@*@(Html.Kendo().Grid<KendoUI_EmployeesManagerV3.Models.Employees>()
        .Name("Grid")
        .Columns(columns => {
            columns.Bound(o => o.Name).Groupable(false);
            columns.Bound(o => o.Email);
            columns.Bound(o => o.Address);
            columns.Bound(o => o.Phone);
        })
        .Pageable()
        .Sortable()
        .Filterable()
        .Groupable()
        .DataSource(dataSource => dataSource
            .Ajax()
            .Read(read => read.Action("getList", "Employees"))
             .PageSize(2)
        )
    )*@

@(Html.Kendo().Grid<KendoUI_EmployeesManagerV3.Models.Employees>
    ()
    .Name("Employees")

    .Columns(columns => {
    columns.Bound(p => p.Name);
    columns.Bound(p => p.Address);
    columns.Bound(p => p.Email);
    columns.Bound(p => p.Phone);
    columns.Command(cmd =>
    {

    cmd.Destroy();
    });
    })

    .ToolBar(toolbar => {
    toolbar.Create();
    toolbar.Save();
    })
   
    .Editable(editable => editable.Mode(GridEditMode.InCell))
    .Pageable()

    .Navigatable()
    .Sortable()
    .Scrollable()
    .DataSource(datasource => datasource

    .Ajax()
    .Read(read => read.Action("getList", "Employees"))


    .Destroy(d => d.Action("Delete", "Employees"))
    .Create(c => c.Action("Create", "Employees"))
    .Update(u => u.Action("Update", "Employees"))
    .PageSize(2)


    .Model(m =>
    {
    m.Id(p => p.Id);
    m.Field(p => p.Id).Editable(false).DefaultValue(0);
    })

    )






    )
    <script>
        function parameterMap(options, operation) {
            if (operation !== "read" && options.models) {
                return { models: kendo.stringify(options.models) };
            }
        }


    </script>
